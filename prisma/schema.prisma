// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SkillTestSubmissionStatus {
  pending
  in_progress
  completed
  failed
}

enum SkillTestDeveloperRole {
  frontend_specialist
  backend_specialist
  integration_specialist
  devops_engineer
  fullstack_developer
  technical_lead
}

model SkillTestDefinition {
  id            String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String                  @db.VarChar(255)
  description   String?
  role          SkillTestDeveloperRole
  questions     Json
  passingScore  Int                    @map("passing_score")
  timeLimit     Int                    @map("time_limit")
  createdAt     DateTime               @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime               @default(now()) @map("updated_at") @db.Timestamptz
  submissions   test_submissions[]      @relation("TestToSubmissions")

  @@map("skill_test_definitions")
}

model test_submissions {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  test_id           String              @db.Uuid
  developer_id      String              @db.Uuid
  application_id    String              @db.Uuid
  answers           Json                @default("[]")
  score             Int?
  ai_feedback       Json?               @default("{}")
  started_at        DateTime            @default(now()) @db.Timestamptz(6)
  completed_at      DateTime?           @db.Timestamptz(6)
  status            SkillTestSubmissionStatus   @default(pending)
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  updated_at        DateTime            @default(now()) @db.Timestamptz(6)
  skill_test        SkillTestDefinition @relation("TestToSubmissions", fields: [test_id], references: [id])
  developer         developers          @relation(fields: [developer_id], references: [id])
  application       developer_applications @relation(fields: [application_id], references: [id])

  @@index([test_id])
  @@index([developer_id])
  @@index([application_id])
}

model available_positions {
  id                        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                     String         @db.VarChar(255)
  role                      developer_role
  description               String
  requirements              String[]
  responsibilities          String[]
  tech_stack                String[]
  benefits                  String[]
  required_experience_years Int?
  salary_range_min          Decimal?       @db.Decimal(10, 2)
  salary_range_max          Decimal?       @db.Decimal(10, 2)
  is_active                 Boolean?       @default(true)
  priority                  Int?           @default(1)
  created_at                DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?      @default(now()) @db.Timestamptz(6)

  @@index([is_active], map: "idx_positions_active")
  @@index([role], map: "idx_positions_role")
}

model call_events {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  call_id    String?   @db.Uuid
  event_type String    @db.VarChar(50)
  event_time DateTime  @db.Timestamptz(6)
  details    Json?
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([call_id], map: "idx_call_events_call")
}

model call_lists {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String             @db.VarChar(255)
  source             String?            @db.VarChar(100)
  total_contacts     Int?
  remaining_contacts Int?
  is_active          Boolean?           @default(true)
  created_by         String?            @db.Uuid
  created_at         DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?          @default(now()) @db.Timestamptz(6)
  metadata           Json?              @default("{}")
  list_assignments   list_assignments[]

  @@index([source], map: "idx_lists_source")
}

model call_metrics {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String?   @db.Uuid
  date                DateTime  @db.Date
  total_calls         Int?      @default(0)
  total_duration      Int?      @default(0)
  successful_calls    Int?      @default(0)
  average_duration    Int?      @default(0)
  quality_score_sum   Int?      @default(0)
  quality_score_count Int?      @default(0)
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([user_id, date])
  @@index([user_id, date], map: "idx_call_metrics_user_date")
}

model call_queue {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id  String?   @db.Uuid
  lead_id      String?   @db.Uuid
  priority     Int?      @default(1)
  status       String    @default("queued") @db.VarChar(50)
  from_number  String    @db.VarChar(20)
  to_number    String    @db.VarChar(20)
  attempts     Int?      @default(0)
  max_attempts Int?      @default(3)
  next_attempt DateTime? @db.Timestamptz(6)
  last_attempt DateTime? @db.Timestamptz(6)
  notes        String?
  active       Boolean?  @default(true)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@index([status], map: "idx_call_queue_status")
}

model calls {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phone_number String    @db.VarChar(50)
  status       String    @default("pending") @db.VarChar(50)
  outcome      String?   @db.VarChar(50)
  duration     Int?      @default(0)
  started_at   DateTime? @db.Timestamptz(6)
  ended_at     DateTime? @db.Timestamptz(6)
  notes        String?
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@index([created_at], map: "idx_calls_created_at")
  @@index([phone_number], map: "idx_calls_phone_number")
  @@index([status], map: "idx_calls_status")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model candidates {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar(255)
  email           String            @unique @db.VarChar(255)
  paypal_email    String            @db.VarChar(255)
  phone           String?           @db.VarChar(50)
  position        String            @db.VarChar(100)
  status          String?           @default("NEW") @db.VarChar(50)
  applied_date    DateTime?         @default(now()) @db.Timestamptz(6)
  resume_url      String
  last_contact    DateTime?         @default(now()) @db.Timestamptz(6)
  notes           String?
  skills          String[]
  experience      Int
  source          String            @db.VarChar(100)
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  interviews      interviews[]
  timeline_events timeline_events[]

  @@index([position], map: "idx_candidates_position")
  @@index([skills], map: "idx_candidates_skills", type: Gin)
  @@index([status], map: "idx_candidates_status")
}

model communications {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id  String?   @db.Uuid
  user_id      String?   @db.Uuid
  type         String    @db.VarChar(50)
  direction    String    @db.VarChar(20)
  content      String?
  status       String?   @db.VarChar(50)
  sent_at      DateTime? @db.Timestamptz(6)
  delivered_at DateTime? @db.Timestamptz(6)
  read_at      DateTime? @db.Timestamptz(6)
  metadata     Json?     @default("{}")
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@index([customer_id], map: "idx_communications_customer")
  @@index([type], map: "idx_communications_type")
  @@index([user_id], map: "idx_communications_user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model customers {
  id                    String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lead_id               String?      @db.Uuid
  name                  String       @db.VarChar(255)
  company_name          String?      @db.VarChar(255)
  email                 String?      @db.VarChar(255)
  phone                 String?      @db.VarChar(20)
  billing_address       String?
  billing_city          String?      @db.VarChar(100)
  billing_state         String?      @db.VarChar(2)
  billing_zip           String?      @db.VarChar(10)
  primary_contact_name  String?      @db.VarChar(255)
  primary_contact_phone String?      @db.VarChar(20)
  primary_contact_email String?      @db.VarChar(255)
  customer_since        DateTime?    @default(now()) @db.Timestamptz(6)
  status                String?      @default("active") @db.VarChar(50)
  total_projects        Int?         @default(0)
  total_value           Decimal?     @default(0) @db.Decimal(12, 2)
  notes                 String?
  created_at            DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?    @default(now()) @db.Timestamptz(6)
  monday_item_id        String?      @db.VarChar(255)
  leads                 leads?       @relation(fields: [lead_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  jobs                  jobs[]
  properties            properties[]

  @@index([lead_id], map: "idx_customers_lead")
  @@index([lead_id], map: "idx_customers_lead_id")
  @@index([monday_item_id], map: "idx_customers_monday_item_id")
  @@index([status], map: "idx_customers_status")
}

model damage_assessments {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  property_id     String?   @db.Uuid
  inspector_id    String?   @db.Uuid
  inspection_date DateTime? @db.Timestamptz(6)
  damage_type     String?   @db.VarChar(100)
  severity        String?   @db.VarChar(50)
  metadata        Json?     @default("{}")
  notes           String?
  photos_count    Int?      @default(0)
  status          String?   @db.VarChar(50)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)

  @@index([inspector_id], map: "idx_damage_assessments_inspector")
  @@index([property_id], map: "idx_damage_assessments_property")
  @@index([status], map: "idx_damage_assessments_status")
}

model developer_applications {
  id                             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  developer_id                   String?     @db.Uuid
  position                       String      @db.VarChar(255)
  cover_letter                   String?
  status                         String?     @default("pending") @db.VarChar(50)
  expected_salary                Decimal?    @db.Decimal(10, 2)
  availability_start_date        DateTime?   @db.Date
  reviewer_id                    String?     @db.Uuid
  review_notes                   String?
  reviewed_at                    DateTime?   @db.Timestamptz(6)
  technical_assessment_score     Int?
  communication_assessment_score Int?
  created_at                     DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime?   @default(now()) @db.Timestamptz(6)
  start_date                     String?     @db.VarChar(255)
  will_do_test_task              Boolean     @default(false)
  test_submitted_at              DateTime?   @db.Timestamptz(6)
  whatsapp_number                String?     @db.VarChar(20)
  developers                     developers? @relation(fields: [developer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  test_submissions               test_submissions[]

  @@index([developer_id], map: "idx_applications_developer")
  @@index([status], map: "idx_applications_status")
}

model developers {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cognito_id             String?                  @unique @db.VarChar(255)
  email                  String                   @unique @db.VarChar(255)
  paypal_email           String                   @db.VarChar(255)
  name                   String                   @db.VarChar(255)
  profile_picture_url    String?                  @db.VarChar(255)
  role                   developer_role
  status                 developer_status?        @default(pending)
  phone                  String?                  @db.VarChar(20)
  github_url             String?                  @db.VarChar(255)
  portfolio_url          String?                  @db.VarChar(255)
  resume_url             String?                  @db.VarChar(255)
  years_experience       Int?
  skills                 Json?                    @default("[]")
  preferred_technologies Json?                    @default("[]")
  hourly_rate            Decimal?                 @db.Decimal(10, 2)
  availability_hours     Int?
  timezone               String?                  @db.VarChar(50)
  english_proficiency    String?                  @db.VarChar(20)
  education              String?
  created_at             DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?                @default(now()) @db.Timestamptz(6)
  preferred_timezone     String?                  @default("PHT") @db.VarChar(50)
  password_hash          String                   @db.VarChar(255)
  developer_applications developer_applications[]
  test_submissions       test_submissions[]

  @@index([cognito_id], map: "idx_developers_cognito")
  @@index([role], map: "idx_developers_role")
  @@index([status], map: "idx_developers_status")
}

model documents {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id       String?   @db.Uuid
  property_id       String?   @db.Uuid
  lead_id           String?   @db.Uuid
  type              String    @db.VarChar(50)
  title             String    @db.VarChar(255)
  description       String?
  s3_key            String    @db.VarChar(1024)
  s3_bucket         String    @db.VarChar(255)
  content_type      String    @db.VarChar(100)
  size              Int
  metadata          Json?
  uploaded_by       String    @db.Uuid
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  duration          Int?
  thumbnail_url     String?
  width             Int?
  height            Int?
  original_filename String?

  @@index([content_type], map: "idx_documents_content_type")
  @@index([created_at(sort: Desc)], map: "idx_documents_created_at")
  @@index([property_id], map: "idx_documents_property")
  @@index([property_id], map: "idx_documents_property_id")
  @@index([type], map: "idx_documents_type")
  @@index([uploaded_by], map: "idx_documents_uploaded_by")
}

model events {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  project_id  String    @db.Uuid
  type        String    @db.VarChar(50)
  title       String    @db.VarChar(255)
  description String?
  metadata    Json?
  created_by  String?   @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  projects    projects  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([project_id], map: "idx_events_project_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model flow_conversion_logs {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  flow_import_id  String?       @db.Uuid
  step_number     Int?
  source_step     Json?
  converted_step  Json?
  ai_analysis     Json?
  success         Boolean?
  error_details   String?
  processing_time Int?
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  flow_imports    flow_imports? @relation(fields: [flow_import_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([flow_import_id], map: "idx_conversion_logs_import")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model flow_executions {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  flow_id     String    @db.VarChar(255)
  user_email  String    @db.VarChar(255)
  status      String    @db.VarChar(50)
  result      Json?
  error       Json?
  executed_at DateTime? @default(now()) @db.Timestamptz(6)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@index([executed_at], map: "idx_flow_executions_executed_at")
  @@index([flow_id], map: "idx_flow_executions_flow_id")
  @@index([status], map: "idx_flow_executions_status")
  @@index([user_email], map: "idx_flow_executions_user_email")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model flow_imports {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  flow_id              String                 @db.VarChar(255)
  user_email           String                 @db.VarChar(255)
  blueprint_name       String                 @db.VarChar(255)
  blueprint_data       Json
  converted_flow       Json
  ai_suggestions       Json?
  status               String                 @default("pending") @db.VarChar(50)
  error_details        Json?
  imported_at          DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @db.Timestamptz(6)
  flow_conversion_logs flow_conversion_logs[]

  @@index([flow_id], map: "idx_flow_imports_flow_id")
  @@index([status], map: "idx_flow_imports_status")
  @@index([user_email], map: "idx_flow_imports_user_email")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model flow_mappings {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  source_module    String    @db.VarChar(255)
  target_module    String    @db.VarChar(255)
  mapping_rules    Json
  confidence_score Float?
  last_used_at     DateTime? @db.Timestamptz(6)
  success_count    Int?      @default(0)
  failure_count    Int?      @default(0)
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)

  @@index([source_module], map: "idx_flow_mappings_source")
  @@index([target_module], map: "idx_flow_mappings_target")
}

model insurance_claims {
  id             String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  project_id     String     @db.Uuid
  claim_number   String     @db.VarChar(100)
  amount         Decimal    @db.Decimal(12, 2)
  status         String     @db.VarChar(50)
  adjuster_name  String?    @db.VarChar(255)
  adjuster_phone String?    @db.VarChar(50)
  adjuster_email String?    @db.VarChar(255)
  created_at     DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?  @default(now()) @db.Timestamptz(6)
  projects       projects   @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  payments       payments[]

  @@index([project_id], map: "idx_insurance_claims_project_id")
}

model interactions {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id String?   @db.Uuid
  property_id String?   @db.Uuid
  lead_id     String?   @db.Uuid
  user_id     String    @db.Uuid
  type        String    @db.VarChar(50)
  subtype     String?   @db.VarChar(50)
  status      String    @db.VarChar(50)
  content     String?
  metadata    Json?
  duration    Int?
  sentiment   String?   @db.VarChar(50)
  score       Int?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@index([created_at(sort: Desc)], map: "idx_interactions_created_at")
  @@index([customer_id], map: "idx_interactions_customer")
  @@index([lead_id], map: "idx_interactions_lead_id")
  @@index([type], map: "idx_interactions_type")
  @@index([user_id], map: "idx_interactions_user")
  @@index([user_id], map: "idx_interactions_user_id")
}

model interviews {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidate_id String?     @db.Uuid
  scheduled_at DateTime    @db.Timestamptz(6)
  interviewer  String      @db.VarChar(255)
  status       String?     @default("SCHEDULED") @db.VarChar(50)
  feedback     String?
  created_at   DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?   @default(now()) @db.Timestamptz(6)
  candidates   candidates? @relation(fields: [candidate_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model jobs {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id    String    @db.Uuid
  address        String
  status         String    @db.VarChar(50)
  notes          String?
  monday_item_id String?   @db.VarChar(255)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  customers      customers @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([customer_id], map: "idx_jobs_customer_id")
  @@index([monday_item_id], map: "idx_jobs_monday_item_id")
}

model lead_lists {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String    @db.VarChar(255)
  source          String    @db.VarChar(100)
  uploaded_by     String?   @db.Uuid
  uploaded_at     DateTime? @default(now()) @db.Timestamptz(6)
  total_leads     Int?      @default(0)
  converted_leads Int?      @default(0)
  metadata        Json?     @default("{}")
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
  leads           leads[]
}

model leads {
  id                       String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  list_id                  String?     @db.Uuid
  name                     String      @db.VarChar(255)
  email                    String?     @db.VarChar(255)
  phone                    String?     @db.VarChar(20)
  address                  String?
  city                     String?     @db.VarChar(100)
  state                    String?     @db.VarChar(2)
  zip                      String?     @db.VarChar(10)
  status                   String?     @default("new") @db.VarChar(50)
  assigned_to              String?     @db.Uuid
  source                   String?     @db.VarChar(100)
  source_details           Json?
  last_contacted_at        DateTime?   @db.Timestamptz(6)
  converted_to_customer_at DateTime?   @db.Timestamptz(6)
  notes                    String?
  created_at               DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?   @default(now()) @db.Timestamptz(6)
  customers                customers[]
  lead_lists               lead_lists? @relation(fields: [list_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([assigned_to], map: "idx_leads_assigned")
  @@index([assigned_to], map: "idx_leads_assigned_to")
  @@index([list_id], map: "idx_leads_list")
  @@index([list_id], map: "idx_leads_list_id")
  @@index([status], map: "idx_leads_status")
}

model list_assignments {
  id                  String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  list_id             String?     @db.Uuid
  assigned_to         String?     @db.Uuid
  status              String?     @default("active") @db.VarChar(50)
  contacts_called     Int?        @default(0)
  successful_contacts Int?        @default(0)
  last_called_at      DateTime?   @db.Timestamptz(6)
  created_at          DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?   @default(now()) @db.Timestamptz(6)
  metadata            Json?       @default("{}")
  call_lists          call_lists? @relation(fields: [list_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([assigned_to], map: "idx_assignments_user")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model media {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id    String?   @db.Uuid
  type          String    @db.VarChar(50)
  name          String    @db.VarChar(255)
  url           String
  original_path String?
  content_type  String?   @db.VarChar(100)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  metadata      Json?     @default("{}")
  created_by    String?   @db.Uuid

  @@index([project_id], map: "idx_media_project")
  @@index([type], map: "idx_media_type")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model media_analysis {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  property_id          String    @db.Uuid
  media_type           String    @db.VarChar(50)
  transcript           String?
  analysis             Json
  timestamp            DateTime  @db.Timestamptz(6)
  recording_start_time DateTime? @db.Timestamptz(6)
  sequence_number      Int?
  recording_id         String?   @db.Uuid
  created_by           String    @db.VarChar(255)
  created_at           DateTime? @default(now()) @db.Timestamptz(6)
  updated_at           DateTime? @default(now()) @db.Timestamptz(6)

  @@index([property_id], map: "idx_media_analysis_property")
  @@index([recording_id], map: "idx_media_analysis_recording")
  @@index([timestamp], map: "idx_media_analysis_timestamp")
  @@index([media_type], map: "idx_media_analysis_type")
}

model metrics {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?   @db.Uuid
  title      String    @db.VarChar(100)
  value      Decimal   @db.Decimal(10, 2)
  period     String    @db.VarChar(20)
  category   String    @db.VarChar(50)
  metadata   Json?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
}

model migrations {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(255)
  executed_at DateTime? @default(now()) @db.Timestamptz(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model monday_user_sync_log {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?   @db.Uuid
  monday_id     String    @db.VarChar(50)
  operation     String    @db.VarChar(50)
  status        String    @default("pending") @db.VarChar(50)
  error_message String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  completed_at  DateTime? @db.Timestamptz(6)
  metadata      Json?     @default("{}")

  @@index([monday_id], map: "idx_monday_user_sync_log_monday_id")
  @@index([user_id], map: "idx_monday_user_sync_log_user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model notifications {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type          String    @db.VarChar(50)
  recipient     String    @db.VarChar(255)
  subject       String    @db.VarChar(255)
  content       String
  status        String    @db.VarChar(50)
  sent_at       DateTime? @db.Timestamptz(6)
  error_details Json?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@index([created_at], map: "idx_notifications_created_at")
  @@index([recipient], map: "idx_notifications_recipient")
  @@index([status], map: "idx_notifications_status")
  @@index([type], map: "idx_notifications_type")
}

model payments {
  id               String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  project_id       String            @db.Uuid
  claim_id         String?           @db.Uuid
  amount           Decimal           @db.Decimal(12, 2)
  status           String            @db.VarChar(50)
  description      String?
  due_date         DateTime?         @db.Timestamptz(6)
  created_at       DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?         @default(now()) @db.Timestamptz(6)
  insurance_claims insurance_claims? @relation(fields: [claim_id], references: [id], onUpdate: NoAction)
  projects         projects          @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([claim_id], map: "idx_payments_claim_id")
  @@index([project_id], map: "idx_payments_project_id")
}

model pipeline_history {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pipeline_id     String?          @db.Uuid
  changed_by      String?          @db.Uuid
  previous_status pipeline_status?
  new_status      pipeline_status?
  previous_phase  pipeline_phase?
  new_phase       pipeline_phase?
  notes           String?
  created_at      DateTime?        @default(now()) @db.Timestamptz(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model presentations {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  property_id       String    @db.Uuid
  presentation_date DateTime  @db.Timestamptz(6)
  status            String    @default("scheduled") @db.VarChar(50)
  notes             String?
  created_by        String    @db.Uuid
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)

  @@index([presentation_date], map: "idx_presentations_date")
  @@index([property_id], map: "idx_presentations_property")
  @@index([status], map: "idx_presentations_status")
}

model project_assignments {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id   String?    @db.Uuid
  user_id      String?    @db.Uuid
  department   department
  role         String     @db.VarChar(50)
  assigned_at  DateTime?  @default(now()) @db.Timestamptz(6)
  completed_at DateTime?  @db.Timestamptz(6)
  status       String?    @default("active") @db.VarChar(50)
  created_at   DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?  @default(now()) @db.Timestamptz(6)

  @@index([project_id], map: "idx_project_assignments_project")
  @@index([user_id], map: "idx_project_assignments_user")
}

model project_messages {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id   String?    @db.Uuid
  sender_id    String?    @db.Uuid
  department   department
  message_type String     @db.VarChar(50)
  content      String
  priority     String?    @default("normal") @db.VarChar(20)
  read_by      Json?      @default("[]")
  created_at   DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?  @default(now()) @db.Timestamptz(6)

  @@index([project_id], map: "idx_project_messages_project")
}

model project_teams {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  property_id String?   @db.Uuid
  lead_id     String?   @db.Uuid
  role        String    @db.VarChar(50)
  user_id     String    @db.Uuid
  notes       String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
}

model project_updates {
  id                String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id        String?     @db.Uuid
  user_id           String?     @db.Uuid
  department        department
  update_type       String      @db.VarChar(50)
  title             String      @db.VarChar(255)
  description       String?
  department_change department?
  metadata          Json?       @default("{}")
  created_at        DateTime?   @default(now()) @db.Timestamptz(6)

  @@index([project_id], map: "idx_project_updates_project")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model projects {
  id                String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String             @db.VarChar(255)
  description       String?
  property_id       String             @db.Uuid
  estimated_value   Decimal?           @db.Decimal(12, 2)
  status            project_status?    @default(pending)
  phase             project_phase?     @default(pre_sale)
  production_status production_status? @default(not_started)
  created_at        DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?          @default(now()) @db.Timestamptz(6)
  sync_status       String?            @default("pending") @db.VarChar(50)
  last_sync_at      DateTime?          @db.Timestamptz(6)
  sync_error        String?
  sync_direction    String?            @db.VarChar(50)
  sync_version      Int?               @default(0)
  events            events[]
  insurance_claims  insurance_claims[]
  payments          payments[]
  properties        properties         @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  team_members      team_members[]

  @@index([property_id], map: "idx_projects_property_id")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model properties {
  id                   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id          String?    @db.Uuid
  name                 String?    @db.VarChar(255)
  address              String
  city                 String     @db.VarChar(100)
  state                String     @db.VarChar(2)
  zip                  String     @db.VarChar(10)
  property_type        String?    @db.VarChar(50)
  square_footage       Int?
  year_built           Int?
  total_projects       Int?       @default(0)
  active_projects      Int?       @default(0)
  last_inspection_date DateTime?  @db.Timestamptz(6)
  metadata             Json?      @default("{}")
  created_at           DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?  @default(now()) @db.Timestamptz(6)
  projects             projects[]
  customers            customers? @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([customer_id], map: "idx_properties_customer")
  @@index([customer_id], map: "idx_properties_customer_id")
}

model renommy_lists {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String               @db.VarChar(255)
  description        String?
  storm_id           String?              @db.Uuid
  imported_at        DateTime?            @default(now()) @db.Timestamptz(6)
  imported_by        String?              @db.Uuid
  total_properties   Int?                 @default(0)
  status             String?              @default("active") @db.VarChar(50)
  metadata           Json?                @default("{}")
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
  storms             storms?              @relation(fields: [storm_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  renommy_properties renommy_properties[]

  @@index([status], map: "idx_renommy_lists_status")
  @@index([storm_id], map: "idx_renommy_lists_storm")
}

model renommy_properties {
  id                      String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  list_id                 String?        @db.Uuid
  renommy_id              String?        @db.VarChar(255)
  address                 String
  city                    String         @db.VarChar(100)
  state                   String         @db.VarChar(2)
  zip                     String         @db.VarChar(10)
  lat                     Decimal?       @db.Decimal(10, 8)
  lng                     Decimal?       @db.Decimal(11, 8)
  property_type           String?        @db.VarChar(50)
  square_footage          Int?
  year_built              Int?
  owner_name              String?        @db.VarChar(255)
  owner_phone             String?        @db.VarChar(20)
  owner_email             String?        @db.VarChar(255)
  secondary_contact_name  String?        @db.VarChar(255)
  secondary_contact_phone String?        @db.VarChar(20)
  secondary_contact_email String?        @db.VarChar(255)
  last_contact_date       DateTime?      @db.Timestamptz(6)
  status                  String?        @default("new") @db.VarChar(50)
  assigned_to             String?        @db.Uuid
  converted_to_lead       Boolean?       @default(false)
  converted_at            DateTime?      @db.Timestamptz(6)
  notes                   String?
  metadata                Json?          @default("{}")
  created_at              DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?      @default(now()) @db.Timestamptz(6)
  renommy_lists           renommy_lists? @relation(fields: [list_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([converted_to_lead], map: "idx_renommy_properties_converted")
  @@index([list_id], map: "idx_renommy_properties_list")
  @@index([status], map: "idx_renommy_properties_status")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model route_tasks {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  route_id           String    @db.Uuid
  task_id            String    @db.Uuid
  stop_order         Int
  estimated_arrival  DateTime? @db.Timestamptz(6)
  actual_arrival     DateTime? @db.Timestamptz(6)
  estimated_duration Int?
  actual_duration    Int?
  status             String?   @default("pending") @db.VarChar(50)
  notes              String?
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  updated_at         DateTime? @default(now()) @db.Timestamptz(6)
  routes             routes    @relation(fields: [route_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tasks              tasks     @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([route_id, stop_order])
  @@unique([route_id, task_id])
  @@index([route_id], map: "idx_route_tasks_route")
  @@index([status], map: "idx_route_tasks_status")
  @@index([task_id], map: "idx_route_tasks_task")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model routes {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String        @db.VarChar(255)
  assigned_to       String        @db.Uuid
  start_location    Json
  end_location      Json?
  start_time        DateTime      @db.Timestamptz(6)
  end_time          DateTime?     @db.Timestamptz(6)
  status            String        @default("draft") @db.VarChar(50)
  total_distance    Decimal?      @db.Decimal(10, 2)
  total_duration    Int?
  optimization_type String?       @default("distance") @db.VarChar(50)
  created_at        DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?     @default(now()) @db.Timestamptz(6)
  route_tasks       route_tasks[]

  @@index([assigned_to], map: "idx_routes_assigned_to")
  @@index([start_time], map: "idx_routes_start_time")
  @@index([status], map: "idx_routes_status")
}

model sales_scripts {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String    @db.VarChar(255)
  content    String
  category   String?   @db.VarChar(100)
  version    Int?      @default(1)
  is_active  Boolean?  @default(true)
  created_by String?   @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  metadata   Json?     @default("{}")

  @@index([category], map: "idx_scripts_category")
}

model sales_team_members {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  team_id    String?   @db.Uuid
  user_id    String    @db.Uuid
  role       String    @db.VarChar(50)
  status     String?   @default("active") @db.VarChar(50)
  start_date DateTime? @default(now()) @db.Timestamptz(6)
  end_date   DateTime? @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([team_id], map: "idx_sales_team_members_team")
  @@index([user_id], map: "idx_sales_team_members_user")
}

model sales_teams {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(255)
  manager_id  String?   @db.Uuid
  description String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  metadata    Json?     @default("{}")
}

model storm_affected_properties {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  storm_id     String?   @db.Uuid
  property_id  String?   @db.Uuid
  damage_level String?   @db.VarChar(50)
  notes        String?
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([storm_id, property_id])
  @@index([property_id], map: "idx_storm_affected_properties_property")
  @@index([storm_id], map: "idx_storm_affected_properties_storm")
}

model storms {
  id                            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                          String?         @db.VarChar(255)
  type                          String          @db.VarChar(50)
  date                          DateTime        @db.Date
  severity                      String?         @db.VarChar(50)
  affected_area_center_lat      Decimal?        @db.Decimal(10, 8)
  affected_area_center_lng      Decimal?        @db.Decimal(11, 8)
  affected_area_radius          Decimal?        @db.Decimal(10, 2)
  estimated_properties_affected Int?
  notes                         String?
  metadata                      Json?           @default("{}")
  created_at                    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime?       @default(now()) @db.Timestamptz(6)
  renommy_lists                 renommy_lists[]

  @@index([date], map: "idx_storms_date")
  @@index([type], map: "idx_storms_type")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sync_field_mapping {
  id                 String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  entity_type        String    @db.VarChar(50)
  monday_field       String    @db.VarChar(255)
  system_field       String    @db.VarChar(255)
  transform_function String?
  bidirectional      Boolean?  @default(true)
  created_at         DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([entity_type, monday_field])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sync_mapping {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  entity_type     String    @db.VarChar(50)
  system_id       String    @db.Uuid
  monday_id       String    @db.VarChar(50)
  monday_board_id String?   @db.VarChar(50)
  monday_group_id String?   @db.VarChar(50)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([entity_type, monday_id])
  @@unique([entity_type, system_id])
  @@index([entity_type, monday_id], map: "idx_sync_mapping_monday")
  @@index([entity_type, system_id], map: "idx_sync_mapping_system")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sync_queue {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  entity_type   String    @db.VarChar(50)
  entity_id     String    @db.Uuid
  operation     String    @db.VarChar(50)
  source        String    @db.VarChar(50)
  status        String?   @default("pending") @db.VarChar(50)
  priority      Int?      @default(0)
  retry_count   Int?      @default(0)
  error_message String?
  payload       Json?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  processed_at  DateTime? @db.Timestamptz(6)
  locked_at     DateTime? @db.Timestamptz(6)
  locked_by     String?   @db.VarChar(255)

  @@index([entity_type, entity_id], map: "idx_sync_queue_entity")
  @@index([priority, created_at], map: "idx_sync_queue_priority")
  @@index([status], map: "idx_sync_queue_status")
}

model tasks {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assigned_to  String?       @db.Uuid
  assigned_by  String?       @db.Uuid
  customer_id  String?       @db.Uuid
  property_id  String?       @db.Uuid
  title        String        @db.VarChar(255)
  description  String?
  due_date     DateTime?     @db.Timestamptz(6)
  priority     String?       @db.VarChar(20)
  status       String?       @default("pending") @db.VarChar(50)
  completed_at DateTime?     @db.Timestamptz(6)
  created_at   DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?     @default(now()) @db.Timestamptz(6)
  route_tasks  route_tasks[]

  @@index([assigned_to], map: "idx_tasks_assigned_to")
  @@index([customer_id], map: "idx_tasks_customer")
  @@index([due_date], map: "idx_tasks_due_date")
  @@index([status], map: "idx_tasks_status")
}

model team_members {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  project_id String    @db.Uuid
  user_id    String    @db.Uuid
  role       String    @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  projects   projects  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([project_id, user_id])
  @@index([project_id], map: "idx_team_members_project_id")
  @@index([user_id], map: "idx_team_members_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model test_tasks {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title             String             @db.VarChar(255)
  description       String
  requirements      String[]
  difficulty        String             @db.VarChar(50)
  estimated_hours   Int?
  repository_url    String?            @db.VarChar(255)
  created_at        DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?          @default(now()) @db.Timestamptz(6)
}

model timeline_events {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidate_id String?     @db.Uuid
  type         String      @db.VarChar(50)
  date         DateTime?   @default(now()) @db.Timestamptz(6)
  description  String
  user_name    String      @db.VarChar(255)
  details      Json?
  created_at   DateTime?   @default(now()) @db.Timestamptz(6)
  candidates   candidates? @relation(fields: [candidate_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_achievements {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String?   @db.Uuid
  achievement_type String    @db.VarChar(100)
  achievement_name String    @db.VarChar(255)
  description      String?
  awarded_at       DateTime? @default(now()) @db.Timestamptz(6)
  metadata         Json?     @default("{}")
}

model user_metrics {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String?   @db.Uuid
  date                DateTime  @db.Date
  calls_made          Int?      @default(0)
  calls_connected     Int?      @default(0)
  total_talk_time     Int?      @default(0)
  successful_outcomes Int?      @default(0)
  tasks_created       Int?      @default(0)
  tasks_completed     Int?      @default(0)
  leads_converted     Int?      @default(0)
  average_call_rating Decimal?  @db.Decimal(3, 2)
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([user_id, date])
  @@index([date], map: "idx_user_metrics_date")
  @@index([user_id, date], map: "idx_user_metrics_user_date")
}

model user_profiles {
  user_id             String          @id @db.VarChar(255)
  email               String          @unique @db.VarChar(255)
  name                String?         @db.VarChar(255)
  profile_picture_url String?
  created_at          DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?       @default(now()) @db.Timestamptz(6)
  user_sessions       user_sessions[]
}

model user_sessions {
  session_id               String        @id @db.VarChar(255)
  user_id                  String        @db.VarChar(255)
  device_id                String        @db.VarChar(255)
  device_name              String?
  device_type              String?
  access_token             String
  refresh_token            String
  token_expires_at         DateTime      @db.Timestamptz(6)
  refresh_token_expires_at DateTime      @db.Timestamptz(6)
  last_active_at           DateTime?     @default(now()) @db.Timestamptz(6)
  created_at               DateTime?     @default(now()) @db.Timestamptz(6)
  user_profiles            user_profiles @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, device_id], map: "idx_user_sessions_device")
  @@index([user_id], map: "idx_user_sessions_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_sync_history {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?        @db.Uuid
  operation     sync_operation
  direction     String         @db.VarChar(20)
  status        String         @default("pending") @db.VarChar(20)
  error_message String?
  created_at    DateTime?      @default(now()) @db.Timestamptz(6)
  completed_at  DateTime?      @db.Timestamptz(6)

  @@index([status], map: "idx_user_sync_history_status")
  @@index([user_id], map: "idx_user_sync_history_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id                       String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                    String    @unique @db.VarChar(255)
  name                     String    @db.VarChar(255)
  role                     user_role
  department               String    @db.VarChar(100)
  cognito_id               String?   @db.VarChar(255)
  monday_id                String?   @db.VarChar(50)
  monday_account_id        String?   @db.VarChar(50)
  monday_title             String?   @db.VarChar(255)
  monday_team              String?   @db.VarChar(100)
  monday_last_sync         DateTime? @db.Timestamptz(6)
  default_password_changed Boolean?  @default(false)
  metadata                 Json?     @default("{}")
  created_at               DateTime? @default(now()) @db.Timestamptz(6)
  updated_at               DateTime? @default(now()) @db.Timestamptz(6)

  @@index([cognito_id], map: "idx_users_cognito_id")
  @@index([department], map: "idx_users_department")
  @@index([email], map: "idx_users_email")
  @@index([monday_id], map: "idx_users_monday_id")
  @@index([role], map: "idx_users_role")
}

enum call_outcome {
  successful
  no_answer    @map("no-answer")
  voicemail
  wrong_number @map("wrong-number")
  busy
  rejected
}

enum call_status {
  pending
  in_progress @map("in-progress")
  completed
  failed
}

enum candidate_status {
  NEW
  REVIEWING
  CONTACTED
  INTERVIEWING
  HIRED
  REJECTED
  ARCHIVED
}

enum department {
  sales
  inspection
  production
  quality_control
  customer_service
  accounting
}

enum developer_role {
  frontend_specialist
  backend_specialist
  integration_specialist
  devops_engineer
  fullstack_developer
  technical_lead
}

enum developer_status {
  pending
  active
  inactive
  rejected
}

enum interview_status {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum pipeline_phase {
  cold
  warm
  hot
}

enum pipeline_status {
  pre_sale
  inspection_set
  presented
  closed
  marketing
  overwatch
}

enum production_status {
  not_started
  waiting_adjustment
  in_production
  completed
}

enum project_phase {
  pre_sale   @map("pre-sale")
  inspection
  presented
  closed
  marketing
  overwatch
}

enum project_status {
  pending
  active
  completed
  cancelled
}

enum project_type {
  inspection
  repair
  replacement
  maintenance
  emergency
}

enum sync_operation {
  pending
  in_progress
  completed
  failed
}

enum task_priority {
  low
  medium
  high
}

enum task_status {
  pending
  completed
  cancelled
}

enum task_type {
  task
  note
}

enum timeline_event_type {
  STATUS_CHANGE
  NOTE_ADDED
  INTERVIEW
  TEST_TASK
  CONTACT
}

/// This enum is commented in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
enum user_role {
  admin
  manager
  agent
  sales_agent
  sales_manager
  sales_lead
  field_rep
  field_inspector
  field_supervisor
  claims_adjuster
  claims_processor
  claims_manager
  legal_counsel
  legal_assistant
  estimator
  estimate_reviewer
  project_manager
  project_coordinator
  solution_architect
  tech_lead
  marketing_tech
  hardware_tech
  developer
  tech_support
}

enum user_status {
  active
  inactive
  pending
}
